var firstRun = true;

function evaluateValues() {
    if (!$('#ldrEnabled')[0].checked) {
        $('#ldrTurnOff')[0].checked = false;
        $('#ldrTurnOff')[0].disabled = true;
        $('#ldrInterval')[0].disabled = true;
        $('#ldrMin')[0].disabled = true;
        $('#cal')[0].disabled = true;
        $('#rst')[0].disabled = true;
    } else {
        $('#ldrInterval')[0].disabled = false;
        if ($("#ldrInterval").val() == 0) {
            $('#ldrTurnOff')[0].checked = false;
            $('#ldrTurnOff')[0].disabled = true;
        } else {
            $('#ldrTurnOff')[0].disabled = false;
        }
        $('#ldrMin')[0].disabled = false;
        $('#cal')[0].disabled = false;
        $('#rst')[0].disabled = false;
    }
}

function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        const http = new XMLHttpRequest();
        http.open('GET', 'getLdr');
        http.send();
        http.onload = () => {
            console.log(http.responseText);
            var prefs = JSON.parse(http.responseText);
            console.log(prefs);
            if (firstRun) {
                $('#ldrEnabled').val(prefs.ldrEnabled);
                $('#ldrInterval').val(prefs.ldrInterval);
                $('#ldrMin').val(prefs.ldrMin);
                $('#relayPin').val(prefs.relayPin);
                $('#sbPin').val(prefs.sbPin);
                $('#ldrPin').val(prefs.ldrPin);
                if (prefs.ldrEnabled == '1') {
                    $('#ldrEnabled').prop('checked', true);
                } else {
                    $('#ldrEnabled').prop('checked', false);
                }                    
                if (prefs.ldrTurnOff == '1') {
                    $('#ldrTurnOff').prop('checked', true);
                } else {
                    $('#ldrTurnOff').prop('checked', false);
                }     
                if (prefs.ledOn == '1') {
                    $('#ledOn').prop('checked', true);
                } else {
                    $('#ledOn').prop('checked', false);
                }
                evaluateValues();
                firstRun = false;
            }
            if (prefs.ldrMax) {
                $('#ldrgrp').show();
                $('#ldr').text(Math.round(prefs.ldrMax) + '%');
            } else {
                $('#ldrgrp').hide();
            }
        }
    }), 5000);
}
function callDeviceLdr(calibrateOrResetLDR) {
    var payload = {
        ldrEnabled: ($("#ldrEnabled").prop("checked") ? 'true' : 'false'),
        ldrTurnOff: ($("#ldrTurnOff").prop("checked") ? 'true' : 'false'),
        ldrInterval: $("#ldrInterval").val(),
        ldrMin: $('#ldrMin').val(),
        ledOn: ($("#ledOn").prop("checked") ? 'true' : 'false'),
        relayPin: $('#relayPin').val(),
        sbPin: $('#sbPin').val(),
        ldrPin: $('#ldrPin').val()
    }
    if (calibrateOrResetLDR != undefined) {
        payload.ldrAction = calibrateOrResetLDR;
    } else {
        payload.ldrAction = 4;
    }
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'ldr?payload=' + JSON.stringify(payload));
    http.send();
    http.onload = () => {
        console.log(http.responseText);
        if (calibrateOrResetLDR == undefined) {
            alert("Success: rebooting the microcontroller");
        } else if (calibrateOrResetLDR == 2) {
            alert("LDR CALIBRATION Success: rebooting the microcontroller");
        } else if (calibrateOrResetLDR == 3) {
            alert("LDR RESET Success: rebooting the microcontroller");
        }
        return false;
    };
}
function calLDR() {
    if (confirm("Current brightness level of the room will be used as the maximum level from which to start adjusting the brightness of the LED strip. Calibration takes up to 5 seconds and will turn off the LEDs.")) {
        const http = new XMLHttpRequest();
        http.open('GET', 'set?payload={"state":"OFF","effect":"solid","allInstances":1}');
        http.send();
        http.onload = () => {
            sleep(4000).then(() => {
               callDeviceLdr(2)
            });
        }
    }  
}
function resetLDR() {
    if (confirm("Are you sure you want to continue? LDR calibration will be reset.")) {
        callDeviceLdr(3);
    }
}
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    poll();
    $('#ldrMin').append(new Option("10%", "10"));
    $('#ldrMin').append(new Option("20%", "20"));
    $('#ldrMin').append(new Option("30%", "30"));
    $('#ldrMin').append(new Option("40%", "40"));
    $('#ldrMin').append(new Option("50%", "50"));
    $('#ldrMin').append(new Option("60%", "60"));
    $('#ldrMin').append(new Option("70%", "70"));
    $('#ldrMin').append(new Option("80%", "80"));
    $('#ldrMin').append(new Option("90%", "90"));
    $('#ldrMin').append(new Option("100%", "100"));

    $('#ldrInterval').append(new Option("Continuous", "0"));
    $('#ldrInterval').append(new Option("10 minutes", "10"));
    $('#ldrInterval').append(new Option("20 minutes", "20"));
    $('#ldrInterval').append(new Option("30 minutes", "30"));
    $('#ldrInterval').append(new Option("40 minutes", "40"));
    $('#ldrInterval').append(new Option("50 minutes", "50"));
    $('#ldrInterval').append(new Option("60 minutes", "60"));
    $('#ldrInterval').append(new Option("120 minutes", "120"));

    $("#ldrEnabled").click(function () {
        evaluateValues();
    });
    $("#ldrInterval").change(function () {
        evaluateValues();
    });
});
