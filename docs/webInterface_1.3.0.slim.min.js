function poll() {
    var sleep = time => new Promise(resolve => setTimeout(resolve, time))
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        const http = new XMLHttpRequest();
        http.open('GET', 'prefs');
        http.send();
        http.onload = () => {
            console.log(http.responseText);
            var prefs = JSON.parse(http.responseText);
            console.log(prefs);
            if (prefs.toggle == '0') {
                $('#toggleLED').css('background-color','lightgrey');
                $('#toggleLED')[0].textContent = "Turn ON";
                $('#toggleLED').removeClass("active");
            } else if (prefs.toggle == '1') {
                $('#toggleLED').css('background-color','orange');
                $('#toggleLED')[0].textContent = "Turn OFF";
                $('#toggleLED').addClass("active");
            }
            if (prefs.effect == "GlowWormWifi") {
                $('#effectSelect').val((prefs.ffeffect.length == 0 || prefs.ffeffect == 'null') ? 'Solid' : prefs.ffeffect);
            } else {
                $('#effectSelect').val((prefs.effect.length == 0 || prefs.effect == 'null') ? 'Solid' : prefs.effect);
            }
            kelvinPicker.color.set({ kelvin: (prefs.whiteTemp*100) });
            if (prefs.whiteTemp == 65) { $("#ut").show(); } else { $("#ut").hide(); }
            if (prefs.cp.length > 0) {
                colorPicker.color.rgb = { r: prefs.cp.split(',')[0], g: prefs.cp.split(',')[1], b: prefs.cp.split(',')[2] }
            }
            brightnessSlider.color.rgb = colorPicker.color.rgb;
            brightnessSlider.colors[0].value=Math.round((100*prefs.brightness)/255);
            $('#gitlink').text("Glow Worm Luciferin (V"+prefs.VERSION+')');
            $('#wifi').text(prefs.wifi + '% ');
            $('#fps').text(prefs.framerate + 'FPS');
            if (prefs.ldr) {
                $('#ldrgrp').show();
                $('#ldr').text(Math.round(prefs.ldr) + '%');
            } else {
                $('#ldrgrp').hide();
            }
        }
    }), 5000);
}
function callDevice(payload) {
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'set?payload=' + payload);
    http.send();
    http.onload = () => console.log(http.responseText);
}
function createPayload() {
    var toggleLED = $('#toggleLED')[0];
    var payload = {
        state: toggleLED.classList.contains('active') ? 'ON' : 'OFF',
        effect: $('#effectSelect').val(),
        color: colorPicker.color.rgb,
        whitetemp: Math.round(kelvinPicker.color.kelvin/100),
        brightness: Math.round((brightnessSlider.color.value * 255) / 100),
        allInstances: 1
    }
    return payload;
}
var colorPicker = new iro.ColorPicker('#picker', {
    width: 320,
    color: '#0091ff',
    layout: [
        {
            component: iro.ui.Wheel
        }
    ]
});
var brightnessSlider = new iro.ColorPicker("#brightnessSlider", {
    width: 300,
    color: colorPicker.color.rgb,
    borderWidth: 1,
    borderColor: "#fff",
    layout: [
        {
            component: iro.ui.Slider,
            options: {
                sliderType: 'value'
            }
        }
    ]
});
var kelvinPicker = new iro.ColorPicker("#kelvinPicker", {
    width: 360,
    color: "rgb(255, 0, 0)",
    borderWidth: 1,
    borderColor: "#fff",
    layoutDirection: 'vertical',
    layout: [
        {
            component: iro.ui.Slider,
            options: {
                sliderType: 'kelvin',
                sliderSize: 40,
                minTemperature: 2000,
                maxTemperature: 11000
            }
        },
    ]
});
$('#effectSelect').change(function () {
    callDevice(JSON.stringify(createPayload()));
});
$('#whiteTempSelect').change(function () {
    callDevice(JSON.stringify(createPayload()));
});
brightnessSlider.on(['input:end'], function(color) {
    callDevice(JSON.stringify(createPayload()));
});
kelvinPicker.on(['input:end'], function(color) {
    callDevice(JSON.stringify(createPayload()));
});
kelvinPicker.on(['color:change'], function(color) {
    if (Math.round(kelvinPicker.color.kelvin/100) == 65) { $("#ut").show(); } else { $("#ut").hide(); }
});
$('#toggleLED').click(function () {
    callDevice(JSON.stringify(createPayload()));
    var toggleLED = $('#toggleLED')[0];
    if (toggleLED.classList.contains('active')) {
        $('#toggleLED').css('background-color','orange');
        $('#toggleLED')[0].textContent = "Turn OFF";
    } else {
        $('#toggleLED').css('background-color','lightgrey');
        $('#toggleLED')[0].textContent = "Turn ON";
    }
});
colorPicker.on(['input:end'], function(color) {
    callDevice(JSON.stringify(createPayload()));
});
colorPicker.on(['color:change'], function () {
    brightnessSlider.color.rgb = colorPicker.color.rgb;
});
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    $("#subtitle").text("Bias Lighting and Ambient Light firmware designed for Firefly Luciferin")
    $("#ut").text("No white balance")
    $('#effectSelect').append(new Option("Solid", "Solid"));
    $('#effectSelect').append(new Option("Fire", "Fire"));
    $('#effectSelect').append(new Option("Twinkle", "Twinkle"));
    $('#effectSelect').append(new Option("Bpm", "Bpm"));
    $('#effectSelect').append(new Option("Rainbow", "Rainbow"));
    $('#effectSelect').append(new Option("Mixed rainbow", "Mixed rainbow"));
    $('#effectSelect').append(new Option("Chase rainbow", "Chase rainbow"));
    $('#effectSelect').append(new Option("Solid rainbow", "Solid rainbow"));
    $('#effectSelect').append(new Option("Bias light", "Bias light"));
    $('#effectSelect').append(new Option("Music mode (VU Meter)", "Music mode (VU Meter)"));
    $('#effectSelect').append(new Option("Music mode (Stereo VU Meter)", "Music mode (Stereo VU Meter)"));
    $('#effectSelect').append(new Option("Music mode (Screen capture)", "Music mode (Screen capture)"));
    $('#effectSelect').append(new Option("Music mode (Rainbow music)", "Music mode (Rainbow music)"));
    poll();
});
