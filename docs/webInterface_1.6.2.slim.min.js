    var mqttErrorShown = true;

    // Funzione per convertire da RGB a HSV
    function rgbToHsv(r, g, b) {
        r /= 255;
        g /= 255;
        b /= 255;
        let max = Math.max(r, g, b), min = Math.min(r, g, b);
        let h, s, v = max;

        let d = max - min;
        s = max == 0 ? 0 : d / max;

        if (max == min) {
            h = 0; // acromatico
        } else {
            switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }

        return [h, s, v];
    }

    // Funzione per convertire da HSV a RGB
    function hsvToRgb(h, s, v) {
        let r, g, b;

        let i = Math.floor(h * 6);
        let f = h * 6 - i;
        let p = v * (1 - s);
        let q = v * (1 - f * s);
        let t = v * (1 - (1 - f) * s);

        switch (i % 6) {
            case 0: r = v, g = t, b = p; break;
            case 1: r = q, g = v, b = p; break;
            case 2: r = p, g = v, b = t; break;
            case 3: r = p, g = q, b = v; break;
            case 4: r = t, g = p, b = v; break;
            case 5: r = v, g = p, b = q; break;
        }

        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
    }

    function poll() {
        var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
        poll(() => new Promise(() => {
            const http = new XMLHttpRequest();
            http.open('GET', 'prefs');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                var prefs = JSON.parse(http.responseText);
                console.log(prefs);
                if (prefs.mqttError == '1' && !mqttErrorShown) {
                    showToast('Can\'t connect to the MQTT server', 'bg-danger text-white');
                    mqttErrorShown = true;
                }
                if ((prefs.mqttError == null || prefs.mqttError == '0') && mqttErrorShown) {
                    showToast('MQTT connected', 'bg-success text-white');
                    mqttErrorShown = false;
                }
                if (prefs.toggle == '0') {
                    $('#toggleLED').css('background-color', 'lightgrey');
                    $('#toggleLED')[0].textContent = "Turn ON";
                    $('#toggleLED').removeClass("active");
                } else if (prefs.toggle == '1') {
                    $('#toggleLED').css('background-color', 'orange');
                    $('#toggleLED')[0].textContent = "Turn OFF";
                    $('#toggleLED').addClass("active");
                }
                if (prefs.effect == "GlowWormWifi") {
                    $('#effectSelect').val((prefs.ffeffect.length == 0 || prefs.ffeffect == 'null') ? 'Solid' : prefs.ffeffect);
                } else {
                    $('#effectSelect').val((prefs.effect.length == 0 || prefs.effect == 'null') ? 'Solid' : prefs.effect);
                }
                kelvinPicker.color.set({kelvin: (prefs.whiteTemp * 100)});
                if (prefs.whiteTemp == 65) {
                    $("#ut").show();
                } else {
                    $("#ut").hide();
                }
                if (prefs.cp.length > 0) {
                    // increase brightness for color wheel
                    let [h, s, v] = rgbToHsv(prefs.cp.split(',')[0], prefs.cp.split(',')[1], prefs.cp.split(',')[2]);
                    v = 1.0;
                    let [newR, newG, newB] = hsvToRgb(h, s, v);
                    colorPicker.color.rgb = {
                        r: newR,
                        g: newG,
                        b: newB
                    }
                }
                brightnessSlider.color.rgb = colorPicker.color.rgb;
                brightnessSlider.colors[0].value = Math.round((100 * prefs.brightness) / 255);
                $('#gitlink').text("Glow Worm Luciferin (V" + prefs.VERSION + ')');
                if (prefs.wifi >= 0) {
                    $('#wifi').text(prefs.wifi + '% ');
                    $('#wf').show();
                    $('#et').hide();
                } else {
                    $('#wf').hide();
                    $('#et').show();
                }
                $('#fps').text(prefs.framerate + 'FPS');
                if (prefs.ldr) {
                    $('#ldrgrp').show();
                    $('#ldr').text(Math.round(prefs.ldr) + '%');
                } else {
                    $('#ldrgrp').hide();
                }
                $("#autosave").prop('checked', prefs.autosave == 1);
            }
        }), 5000);
    }

    function callDevice(payload) {
        console.log(payload);
        const http = new XMLHttpRequest();
        http.open('GET', 'set?payload=' + payload);
        http.send();
        http.onload = () => console.log(http.responseText);
    }

    function createPayload() {
        var toggleLED = $('#toggleLED')[0];
        var payload = {
            state: toggleLED.classList.contains('active') ? 'ON' : 'OFF',
            effect: $('#effectSelect').val(),
            color: colorPicker.color.rgb,
            whitetemp: Math.round(kelvinPicker.color.kelvin / 100),
            brightness: Math.round((brightnessSlider.color.value * 255) / 100),
            allInstances: 1
        }
        return payload;
    }

    var colorPicker = new iro.ColorPicker('#picker', {
        width: 320,
        color: '#0091ff',
        layout: [
            {
                component: iro.ui.Wheel
            }
        ]
    });
    var brightnessSlider = new iro.ColorPicker("#brightnessSlider", {
        width: 300,
        color: colorPicker.color.rgb,
        borderWidth: 1,
        borderColor: "#fff",
        layout: [
            {
                component: iro.ui.Slider,
                options: {
                    sliderType: 'value'
                }
            }
        ]
    });
    var kelvinPicker = new iro.ColorPicker("#kelvinPicker", {
        width: 360,
        color: "rgb(255, 0, 0)",
        borderWidth: 1,
        borderColor: "#fff",
        layoutDirection: 'vertical',
        layout: [
            {
                component: iro.ui.Slider,
                options: {
                    sliderType: 'kelvin',
                    sliderSize: 40,
                    minTemperature: 2000,
                    maxTemperature: 11000
                }
            },
        ]
    });
    $('#effectSelect').change(function () {
        callDevice(JSON.stringify(createPayload()));
    });
    $('#whiteTempSelect').change(function () {
        callDevice(JSON.stringify(createPayload()));
    });
    brightnessSlider.on(['input:end'], function (color) {
        callDevice(JSON.stringify(createPayload()));
    });
    kelvinPicker.on(['input:end'], function (color) {
        callDevice(JSON.stringify(createPayload()));
    });
    kelvinPicker.on(['color:change'], function (color) {
        if (Math.round(kelvinPicker.color.kelvin / 100) == 65) {
            $("#ut").show();
        } else {
            $("#ut").hide();
        }
    });
    $('#toggleLED').click(function () {
        callDevice(JSON.stringify(createPayload()));
        var toggleLED = $('#toggleLED')[0];
        if (toggleLED.classList.contains('active')) {
            $('#toggleLED').css('background-color', 'orange');
            $('#toggleLED')[0].textContent = "Turn OFF";
        } else {
            $('#toggleLED').css('background-color', 'lightgrey');
            $('#toggleLED')[0].textContent = "Turn ON";
        }
    });
    colorPicker.on(['input:end'], function (color) {
        callDevice(JSON.stringify(createPayload()));
    });
    colorPicker.on(['color:change'], function () {
        brightnessSlider.color.rgb = colorPicker.color.rgb;
    });
    const sleep = (s) => {
        return new Promise(resolve => setTimeout(resolve, (s)));
    };
    sleep(100).then(() => {
        $("#subtitle").text("Bias Lighting and Ambient Light firmware designed for Firefly Luciferin")
        $("#ut").text("No white balance")
        $('#effectSelect').append(new Option("Solid", "Solid"));
        $('#effectSelect').append(new Option("Fire", "Fire"));
        $('#effectSelect').append(new Option("Twinkle", "Twinkle"));
        $('#effectSelect').append(new Option("Bpm", "Bpm"));
        $('#effectSelect').append(new Option("Rainbow", "Rainbow"));
        $('#effectSelect').append(new Option("Slow rainbow", "Slow rainbow"));
        $('#effectSelect').append(new Option("Chase rainbow", "Chase rainbow"));
        $('#effectSelect').append(new Option("Solid rainbow", "Solid rainbow"));
        $('#effectSelect').append(new Option("Random colors", "Random colors"));
        $('#effectSelect').append(new Option("Rainbow colors", "Rainbow colors"));
        $('#effectSelect').append(new Option("Meteor", "Meteor"));
        $('#effectSelect').append(new Option("Color waterfall", "Color waterfall"));
        $('#effectSelect').append(new Option("Random marquee", "Random marquee"));
        $('#effectSelect').append(new Option("Rainbow marquee", "Rainbow marquee"));
        $('#effectSelect').append(new Option("Pulsing rainbow", "Pulsing rainbow"));
        $('#effectSelect').append(new Option("Christmas", "Christmas"));
        $('#effectSelect').append(new Option("Bias light", "Bias light"));
        $('#effectSelect').append(new Option("Music mode (VU Meter)", "Music mode (VU Meter)"));
        $('#effectSelect').append(new Option("Music mode (Stereo VU Meter)", "Music mode (Stereo VU Meter)"));
        $('#effectSelect').append(new Option("Music mode (Screen capture)", "Music mode (Screen capture)"));
        $('#effectSelect').append(new Option("Music mode (Rainbow music)", "Music mode (Rainbow music)"));
        poll();

        var toastContainerHTML = `
        <div id="toastContainer" aria-live="polite" aria-atomic="true" style="position: relative;">
            <div style="position: absolute; top: 0; right: 0;"></div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', toastContainerHTML);
    });

    function showToast(message, contextClass) {
        // Aggiungi il container se non esiste già
        if (!document.getElementById('toastContainer')) {
            addToastContainer();
        }
        var toastHTML = `
        <div class="toast ${contextClass}" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000" style="position: fixed; bottom: 10px; right: 10px; z-index: 1051;">
            <div class="toast-body">
                ${message}
            </div>
        </div>`;
        var toastContainer = document.getElementById('toastContainer').children[0];
        toastContainer.insertAdjacentHTML('beforeend', toastHTML);
        var toastElement = toastContainer.lastElementChild;
        $(toastElement).toast('show');
    }

    function asCBAction(cbAs) {
        var toggleLED = $('#toggleLED')[0];
        toggleLED.textContent === "Turn OFF"
        var strConfirm = "The lights are " + ((toggleLED.textContent === "Turn OFF") ? "ON" : "OFF") + ".\nColor, current effect, and brightness information will be stored in memory to retain these settings after reboot.\n\nDo you want to save these settings?";
        if (confirm(strConfirm)) {
            const http = new XMLHttpRequest();
            http.open('GET', 'setAutoSave?autosave=1');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                callDevice(JSON.stringify(createPayload()));
                const secondHttp = new XMLHttpRequest();
                secondHttp.open('GET', 'setAutoSave?autosave=0');
                secondHttp.send();
                secondHttp.onload = () => {
                    console.log(secondHttp.responseText);
                    if (secondHttp.responseText === "Stored") {
                        showToast('Saved', 'bg-success text-white');
                    } else {
                        showToast('Error while saving', 'bg-danger text-white');
                    }
                }
            }
        }
    }

