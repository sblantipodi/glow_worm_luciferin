var mqttErrorShown = false;
var received = false;

function poll() {
    var poll = (promiseFn, time) => promiseFn().then(sleep(time).then(() => poll(promiseFn, time)))
    poll(() => new Promise(() => {
        if (!received) {
            received = true;
            const http = new XMLHttpRequest();
            http.open('GET', 'getsettings');
            http.send();
            http.onload = () => {
                console.log(http.responseText);
                var prefs = JSON.parse(http.responseText);
                // console.log(prefs);
                if (prefs.mqttError == '1' && !mqttErrorShown) {
                    showToast('Can\'t connect to the MQTT server', 'bg-danger text-white');
                    mqttErrorShown = true;
                } else if ((prefs.mqttError == null || prefs.mqttError == '0') && mqttErrorShown) {
                    showToast('MQTT connected', 'bg-success text-white');
                    mqttErrorShown = false;
                }
                $('#deviceName').val(prefs.deviceName);
                $('#microcontrollerIP').val(prefs.ip);
                if (prefs.dhcp == '1') {
                    document.getElementById('microcontrollerIP').disabled = true;
                } else {
                    $("#dhcpCheckbox").click();
                }
                if (prefs.mqttIp.length == 0) {
                    $("#mqttCheckbox").click();
                }
                if (prefs.ethd >= 1) {
                    $("#ethCbx").click();
                }
                if (prefs.ethd == -1) {
                    $("#enEth").hide();
                }
                if (prefs.ethd == -1 || prefs.ethd == 0) {
                    $("#eth").hide();
                }
                $('#ethd').val(prefs.ethd);
                $('#inputMqttIp').val(prefs.mqttIp);
                $('#ssid').val(prefs.ssid);
                $('#wifipwd').val("***************");
                $('#mqttPort').val(prefs.mqttPort);
                $('#mqttTopic').val(prefs.mqttTopic);
                $('#mqttuser').val(prefs.mqttuser);
                $('#mqttpass').val(prefs.mqttpass);
                $('#lednum').val(prefs.lednum);
                $('#additionalParam').val(prefs.gpio);
                $('#gpioClock').val(prefs.gpioClock);
                $('#colorMode').val(prefs.colorMode);
                $('#colorOrder').val(prefs.colorOrder);
                $('#br').val(prefs.br);
                if (prefs.colorMode == '5') {
                    $("#clock").show();
                } else {
                    $("#clock").hide();
                }
            }
        }
    }), 5000);
}
function callDevice() {
    var payload = {
        deviceName: encodeURIComponent($('#deviceName').val()),
        microcontrollerIP: ($("#dhcpCheckbox").prop("checked") ? '' : $('#microcontrollerIP').val()),
        ethd: ($("#ethCbx").prop("checked") ? $('#ethd').val() : 0),
        ssid: encodeURIComponent($('#ssid').val()),
        wifipwd: ($('#wifipwd').val() != "***************") ? encodeURIComponent($('#wifipwd').val()) : "",
        mqttCheckbox: $("#mqttCheckbox").prop("checked"),
        mqttIP: $('#inputMqttIp').val(),
        mqttPort: $('#mqttPort').val(),
        mqttTopic: encodeURIComponent($('#mqttTopic').val()),
        mqttuser: encodeURIComponent($('#mqttuser').val()),
        mqttpass: encodeURIComponent($('#mqttpass').val()),
        additionalParam: $('#additionalParam').val(),
        gpioClock: $('#gpioClock').val(),
        colorMode: $('#colorMode').val(),
        colorOrder: $('#colorOrder').val(),
        br: $('#br').val(),
        lednum: $('#lednum').val()
    }
    console.log(payload);
    const http = new XMLHttpRequest();
    http.open('GET', 'setting?payload=' + JSON.stringify(payload));
    http.send();
    http.onload = () => {
        console.log(http.responseText);
        showToast('Success: rebooting the microcontroller', 'bg-success text-white');
        return false;
    };
}
function cbxAcn(cbMqtt, cbDhcp, cbEth) {
    if (cbMqtt.checked) {
        document.getElementById('inputMqttIp').setAttribute('required', '');
        document.getElementById('mqttPort').setAttribute('required', '');
        document.getElementById('mqttTopic').setAttribute('required', '');
        document.getElementById('inputMqttIp').disabled = false;
        document.getElementById('mqttPort').disabled = false;
        document.getElementById('mqttTopic').disabled = false;
        document.getElementById('mqttuser').disabled = false;
        document.getElementById('mqttpass').disabled = false;
        document.getElementById('inputMqttIp').disabled = false;
    } else {
        document.getElementById('inputMqttIp').removeAttribute('required');
        document.getElementById('inputMqttIp').disabled = true;
        document.getElementById('mqttPort').removeAttribute('required');
        document.getElementById('mqttPort').disabled = true;
        document.getElementById('mqttPort').value = "";
        document.getElementById('mqttPort').disabled = true;
        document.getElementById('mqttTopic').removeAttribute('required');
        document.getElementById('mqttTopic').disabled = true;
        document.getElementById('mqttTopic').value = "";
        document.getElementById('mqttTopic').disabled = true;
        document.getElementById('mqttuser').value = "";
        document.getElementById('mqttuser').disabled = true;
        document.getElementById('mqttpass').value = "";
        document.getElementById('mqttpass').disabled = true;
        document.getElementById('inputMqttIp').value = "";
        document.getElementById('inputMqttIp').disabled = true;
    }
    if (cbDhcp.checked) {
        document.getElementById('microcontrollerIP').disabled = true;
    } else {
        document.getElementById('microcontrollerIP').disabled = false;
    }
    if (cbEth.checked) {
        if ($('#ethd').val() === 0 || $('#ethd').val() === null) {
            $('#ethd').val(1);
        }
        document.getElementById('inputMqttIp').removeAttribute('required');
        document.getElementById('mqttPort').removeAttribute('required');
        document.getElementById('mqttTopic').removeAttribute('required');
        $("#eth").show();
        $("#wifi").hide();
    } else {
        $("#eth").hide();
        $("#wifi").show();
    }
}
const sleep = (s) => {
    return new Promise(resolve => setTimeout(resolve, (s)));
};
sleep(100).then(() => {
    $("#subtitle").text("Bias Lighting and Ambient Light firmware designed for Firefly Luciferin")
    poll();
    $('#colorMode').append(new Option("RGB", "1"));
    $('#colorMode').append(new Option("RGBW", "2"));
    $('#colorMode').append(new Option("RGBW (Brighter)", "3"));
    $('#colorMode').append(new Option("RGBW (RGB only)", "4"));
    $('#colorMode').append(new Option("DotStar", "5"));

    $('#colorOrder').append(new Option("GRB/GRBW", "1"));
    $('#colorOrder').append(new Option("RGB/RGBW", "2"));
    $('#colorOrder').append(new Option("BGR/BGRW", "3"));
    $('#colorOrder').append(new Option("BRG/BRGW", "4"));
    $('#colorOrder').append(new Option("RBG/RBGW", "5"));
    $('#colorOrder').append(new Option("GBR/GBRW", "6"));
    $('#colorOrder').append(new Option("GRWB", "7"));
    $('#colorOrder').append(new Option("GWBR", "8"));
    $('#colorOrder').append(new Option("WRBG", "9"));
    $('#colorOrder').append(new Option("RGWB", "10"));
    $('#colorOrder').append(new Option("RWBG", "11"));
    $('#colorOrder').append(new Option("WGBR", "12"));
    $('#colorOrder').append(new Option("BGWR", "13"));
    $('#colorOrder').append(new Option("BWRG", "14"));
    $('#colorOrder').append(new Option("WGRB", "15"));
    $('#colorOrder').append(new Option("BRWG", "16"));
    $('#colorOrder').append(new Option("BWGR", "17"));
    $('#colorOrder').append(new Option("WRGB", "18"));
    $('#colorOrder').append(new Option("RBWG", "19"));
    $('#colorOrder').append(new Option("RWGB", "20"));
    $('#colorOrder').append(new Option("WBGR", "21"));
    $('#colorOrder').append(new Option("GBWR", "22"));
    $('#colorOrder').append(new Option("GWRB", "23"));
    $('#colorOrder').append(new Option("WBRG", "24"));

    $('#br').append(new Option("115200", "8"));
    $('#br').append(new Option("230400", "1"));
    $('#br').append(new Option("460800", "2"));
    $('#br').append(new Option("500000", "3"));
    $('#br').append(new Option("921600", "4"));
    $('#br').append(new Option("1000000", "5"));
    $('#br').append(new Option("1500000", "6"));
    $('#br').append(new Option("2000000", "7"));

    $('#ethd').append(new Option("QuinLed-ESP32-Ethernet", "1"));
    $('#ethd').append(new Option("QuinLed-Dig-Octa Brainboard-32-8L and LilyGO-T-ETH-POE", "2"));
    $('#ethd').append(new Option("LilyGO-T-POE-Pro", "7"));
    $('#ethd').append(new Option("WT32-ETH01", "3"));
    $('#ethd').append(new Option("ESP32-ETHERNET-KIT-VE", "4"));
    $('#ethd').append(new Option("ESP32-POE", "5"));
    $('#ethd').append(new Option("ESP32-POE-WROVER", "8"));
    $('#ethd').append(new Option("WESP32", "6"));

    var toastContainerHTML = `
    <div id="toastContainer" aria-live="polite" aria-atomic="true" style="position: relative;">
        <div style="position: absolute; top: 0; right: 0;"></div>
    </div>`;
    document.body.insertAdjacentHTML('beforeend', toastContainerHTML);
});
$('#colorMode').change(function(){
    var data= $(this).val();
    if (data == 5) {
        $("#clock").show();
    } else {
        $("#clock").hide();
    }
});

function showToast(message, contextClass) {
    // Aggiungi il container se non esiste gi√†
    if (!document.getElementById('toastContainer')) {
        addToastContainer();
    }
    var toastHTML = `
    <div class="toast ${contextClass}" role="alert" aria-live="assertive" aria-atomic="true" data-delay="5000" style="position: fixed; bottom: 10px; right: 10px; z-index: 1051;">
        <div class="toast-body">
            ${message}
        </div>
    </div>`;
    var toastContainer = document.getElementById('toastContainer').children[0];
    toastContainer.insertAdjacentHTML('beforeend', toastHTML);
    var toastElement = toastContainer.lastElementChild;
    $(toastElement).toast('show');
}
